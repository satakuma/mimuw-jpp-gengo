{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintGengo.
--   Generated by the BNF converter.

module PrintGengo where

import qualified AbsGengo
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsGengo.Ident where
  prt _ (AbsGengo.Ident i) = doc (showString i)

instance Print (AbsGengo.Program a) where
  prt i e = case e of
    AbsGengo.Program _ topdefs -> prPrec i 0 (concatD [prt 0 topdefs])

instance Print (AbsGengo.TopDef a) where
  prt i e = case e of
    AbsGengo.FnDef _ id args type_ block -> prPrec i 0 (concatD [doc (showString "fn"), prt 0 id, doc (showString "("), prt 0 args, doc (showString ")"), doc (showString "->"), prt 0 type_, prt 0 block])
    AbsGengo.GnDef _ id args type_ block -> prPrec i 0 (concatD [doc (showString "gn"), prt 0 id, doc (showString "("), prt 0 args, doc (showString ")"), doc (showString "->"), prt 0 type_, prt 0 block])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [AbsGengo.TopDef a] where
  prt = prtList

instance Print (AbsGengo.Arg a) where
  prt i e = case e of
    AbsGengo.VArg _ type_ id -> prPrec i 0 (concatD [prt 0 type_, prt 0 id])
    AbsGengo.RefArg _ type_ id -> prPrec i 0 (concatD [prt 0 type_, doc (showString "&"), prt 0 id])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsGengo.Arg a] where
  prt = prtList

instance Print (AbsGengo.Block a) where
  prt i e = case e of
    AbsGengo.Block _ stmts -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stmts, doc (showString "}")])

instance Print [AbsGengo.Stmt a] where
  prt = prtList

instance Print (AbsGengo.Stmt a) where
  prt i e = case e of
    AbsGengo.Empty _ -> prPrec i 0 (concatD [doc (showString ";")])
    AbsGengo.BStmt _ block -> prPrec i 0 (concatD [prt 0 block])
    AbsGengo.Init _ type_ id expr -> prPrec i 0 (concatD [prt 0 type_, prt 0 id, doc (showString "="), prt 0 expr, doc (showString ";")])
    AbsGengo.Ass _ id expr -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 expr, doc (showString ";")])
    AbsGengo.Ret _ expr -> prPrec i 0 (concatD [doc (showString "return"), prt 0 expr, doc (showString ";")])
    AbsGengo.Yield _ expr -> prPrec i 0 (concatD [doc (showString "yield"), prt 0 expr, doc (showString ";")])
    AbsGengo.Break _ -> prPrec i 0 (concatD [doc (showString "break"), doc (showString ";")])
    AbsGengo.Continue _ -> prPrec i 0 (concatD [doc (showString "continue"), doc (showString ";")])
    AbsGengo.Cond _ if_ -> prPrec i 0 (concatD [prt 0 if_])
    AbsGengo.While _ expr block -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 block])
    AbsGengo.For _ id expr block -> prPrec i 0 (concatD [doc (showString "for"), prt 0 id, doc (showString "in"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 block])
    AbsGengo.SExp _ expr -> prPrec i 0 (concatD [prt 0 expr, doc (showString ";")])
    AbsGengo.NestFn _ topdef -> prPrec i 0 (concatD [prt 0 topdef])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (AbsGengo.If a) where
  prt i e = case e of
    AbsGengo.If _ expr block -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 block])
    AbsGengo.IfElse _ expr block else_ -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 block, doc (showString "else"), prt 0 else_])

instance Print (AbsGengo.Else a) where
  prt i e = case e of
    AbsGengo.ElseBlock _ block -> prPrec i 0 (concatD [prt 0 block])
    AbsGengo.ElseIf _ if_ -> prPrec i 0 (concatD [prt 0 if_])

instance Print (AbsGengo.Type a) where
  prt i e = case e of
    AbsGengo.Int _ -> prPrec i 0 (concatD [doc (showString "int")])
    AbsGengo.Str _ -> prPrec i 0 (concatD [doc (showString "string")])
    AbsGengo.Bool _ -> prPrec i 0 (concatD [doc (showString "bool")])
    AbsGengo.Generator _ type_ -> prPrec i 0 (concatD [doc (showString "@"), doc (showString "("), prt 0 type_, doc (showString ")")])

instance Print (AbsGengo.Expr a) where
  prt i e = case e of
    AbsGengo.EVar _ id -> prPrec i 6 (concatD [prt 0 id])
    AbsGengo.ELitInt _ n -> prPrec i 6 (concatD [prt 0 n])
    AbsGengo.ELitTrue _ -> prPrec i 6 (concatD [doc (showString "true")])
    AbsGengo.ELitFalse _ -> prPrec i 6 (concatD [doc (showString "false")])
    AbsGengo.EApp _ id exprs -> prPrec i 6 (concatD [prt 0 id, doc (showString "("), prt 0 exprs, doc (showString ")")])
    AbsGengo.EString _ str -> prPrec i 6 (concatD [prt 0 str])
    AbsGengo.Neg _ expr -> prPrec i 5 (concatD [doc (showString "-"), prt 6 expr])
    AbsGengo.Not _ expr -> prPrec i 5 (concatD [doc (showString "!"), prt 6 expr])
    AbsGengo.EMul _ expr1 mulop expr2 -> prPrec i 4 (concatD [prt 4 expr1, prt 0 mulop, prt 5 expr2])
    AbsGengo.EAdd _ expr1 addop expr2 -> prPrec i 3 (concatD [prt 3 expr1, prt 0 addop, prt 4 expr2])
    AbsGengo.ERel _ expr1 relop expr2 -> prPrec i 2 (concatD [prt 2 expr1, prt 0 relop, prt 3 expr2])
    AbsGengo.EAnd _ expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString "&&"), prt 1 expr2])
    AbsGengo.EOr _ expr1 expr2 -> prPrec i 0 (concatD [prt 1 expr1, doc (showString "||"), prt 0 expr2])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsGengo.Expr a] where
  prt = prtList

instance Print (AbsGengo.AddOp a) where
  prt i e = case e of
    AbsGengo.Plus _ -> prPrec i 0 (concatD [doc (showString "+")])
    AbsGengo.Minus _ -> prPrec i 0 (concatD [doc (showString "-")])

instance Print (AbsGengo.MulOp a) where
  prt i e = case e of
    AbsGengo.Times _ -> prPrec i 0 (concatD [doc (showString "*")])
    AbsGengo.Div _ -> prPrec i 0 (concatD [doc (showString "/")])
    AbsGengo.Mod _ -> prPrec i 0 (concatD [doc (showString "%")])

instance Print (AbsGengo.RelOp a) where
  prt i e = case e of
    AbsGengo.LTH _ -> prPrec i 0 (concatD [doc (showString "<")])
    AbsGengo.LE _ -> prPrec i 0 (concatD [doc (showString "<=")])
    AbsGengo.GTH _ -> prPrec i 0 (concatD [doc (showString ">")])
    AbsGengo.GE _ -> prPrec i 0 (concatD [doc (showString ">=")])
    AbsGengo.EQU _ -> prPrec i 0 (concatD [doc (showString "==")])
    AbsGengo.NE _ -> prPrec i 0 (concatD [doc (showString "!=")])

