-- File generated by the BNF Converter (bnfc 2.9.3).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelGengo where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsGengo

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsGengo.Ident -> Result
transIdent x = case x of
  AbsGengo.Ident string -> failure x

transProgram :: Show a => AbsGengo.Program' a -> Result
transProgram x = case x of
  AbsGengo.Program _ topdefs -> failure x

transTopDef :: Show a => AbsGengo.TopDef' a -> Result
transTopDef x = case x of
  AbsGengo.FnDef _ ident args type_ block -> failure x
  AbsGengo.GnDef _ ident args type_ block -> failure x

transArg :: Show a => AbsGengo.Arg' a -> Result
transArg x = case x of
  AbsGengo.VArg _ type_ ident -> failure x
  AbsGengo.RefArg _ type_ ident -> failure x

transBlock :: Show a => AbsGengo.Block' a -> Result
transBlock x = case x of
  AbsGengo.Block _ stmts -> failure x

transStmt :: Show a => AbsGengo.Stmt' a -> Result
transStmt x = case x of
  AbsGengo.Empty _ -> failure x
  AbsGengo.BStmt _ block -> failure x
  AbsGengo.Init _ type_ ident expr -> failure x
  AbsGengo.Ass _ ident expr -> failure x
  AbsGengo.Ret _ expr -> failure x
  AbsGengo.Yield _ expr -> failure x
  AbsGengo.Break _ -> failure x
  AbsGengo.Continue _ -> failure x
  AbsGengo.Cond _ if_ -> failure x
  AbsGengo.While _ expr block -> failure x
  AbsGengo.For _ ident expr block -> failure x
  AbsGengo.SExp _ expr -> failure x
  AbsGengo.NestFn _ topdef -> failure x

transIf :: Show a => AbsGengo.If' a -> Result
transIf x = case x of
  AbsGengo.If _ expr block -> failure x
  AbsGengo.IfElse _ expr block else_ -> failure x

transElse :: Show a => AbsGengo.Else' a -> Result
transElse x = case x of
  AbsGengo.ElseBlock _ block -> failure x
  AbsGengo.ElseIf _ if_ -> failure x

transType :: Show a => AbsGengo.Type' a -> Result
transType x = case x of
  AbsGengo.Int _ -> failure x
  AbsGengo.Str _ -> failure x
  AbsGengo.Bool _ -> failure x
  AbsGengo.Generator _ type_ -> failure x

transExpr :: Show a => AbsGengo.Expr' a -> Result
transExpr x = case x of
  AbsGengo.EVar _ ident -> failure x
  AbsGengo.ELitInt _ integer -> failure x
  AbsGengo.ELitTrue _ -> failure x
  AbsGengo.ELitFalse _ -> failure x
  AbsGengo.EApp _ ident exprs -> failure x
  AbsGengo.EString _ string -> failure x
  AbsGengo.Neg _ expr -> failure x
  AbsGengo.Not _ expr -> failure x
  AbsGengo.EMul _ expr1 mulop expr2 -> failure x
  AbsGengo.EAdd _ expr1 addop expr2 -> failure x
  AbsGengo.ERel _ expr1 relop expr2 -> failure x
  AbsGengo.EAnd _ expr1 expr2 -> failure x
  AbsGengo.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => AbsGengo.AddOp' a -> Result
transAddOp x = case x of
  AbsGengo.Plus _ -> failure x
  AbsGengo.Minus _ -> failure x

transMulOp :: Show a => AbsGengo.MulOp' a -> Result
transMulOp x = case x of
  AbsGengo.Times _ -> failure x
  AbsGengo.Div _ -> failure x
  AbsGengo.Mod _ -> failure x

transRelOp :: Show a => AbsGengo.RelOp' a -> Result
transRelOp x = case x of
  AbsGengo.LTH _ -> failure x
  AbsGengo.LE _ -> failure x
  AbsGengo.GTH _ -> failure x
  AbsGengo.GE _ -> failure x
  AbsGengo.EQU _ -> failure x
  AbsGengo.NE _ -> failure x
