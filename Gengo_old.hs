-- automatically generated by BNF Converter
module Main where


import System.IO ( stdin, stderr, hGetContents, hPutStrLn )
import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )
import Control.Monad (when)

import LexGengo
import ParGengo
import SkelGengo
import PrintGengo
import AbsGengo
import Typecheck


import ErrM

type ParseFun a = [Token] -> Err a

myLLexer = myLexer

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree
 = do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

runFile :: (Print a, Show a) => Verbosity -> ParseFun a -> FilePath -> IO ()
runFile v p f = putStrLn f >> readFile f >>= run v p

run :: (Print a, Show a) => Verbosity -> ParseFun a -> String -> IO ()
run v parser input =
  let tokens = myLLexer input
    in case parser tokens of
         Bad err -> do
           putStrV v "Parse failed...\n"
           putStrV v "Tokens:"
           putStrV v $ show tokens
           hPutStrLn stderr err
           exitFailure
         Ok tree -> do
           putStrV v "Parse successful!\n"
           showTree v tree
           putStrV v "Typechecking...\n"
           typecheckRes <- runTypecheck $ typecheck tree
           case typecheckRes of
             Left err -> do
               hPutStrLn stderr (show err)
               exitFailure
             Right _ -> do
               putStrV v "Typecheck succesful!\n"
               exitSuccess
 
main :: IO ()
main = do
  args <- getArgs
  case args of
    [] -> getContents >>= run 2 pProgram
    fs -> mapM_ (runFile 2 pProgram) fs

