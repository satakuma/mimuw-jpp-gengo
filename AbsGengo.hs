-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsGengo where

newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read)

data Program a = Program a [TopDef a]
  deriving (Eq, Ord, Show, Read)

instance Functor Program where
    fmap f x = case x of
        Program a topdefs -> Program (f a) (map (fmap f) topdefs)

data TopDef a
    = FnDef a Ident [Arg a] (Type a) (Block a)
    | GnDef a Ident [Arg a] (Type a) (Block a)
  deriving (Eq, Ord, Show, Read)

instance Functor TopDef where
    fmap f x = case x of
        FnDef a ident args type_ block -> FnDef (f a) ident (map (fmap f) args) (fmap f type_) (fmap f block)
        GnDef a ident args type_ block -> GnDef (f a) ident (map (fmap f) args) (fmap f type_) (fmap f block)

data Arg a = VArg a (Type a) Ident | RefArg a (Type a) Ident
  deriving (Eq, Ord, Show, Read)

instance Functor Arg where
    fmap f x = case x of
        VArg a type_ ident -> VArg (f a) (fmap f type_) ident
        RefArg a type_ ident -> RefArg (f a) (fmap f type_) ident

data Block a = Block a [Stmt a]
  deriving (Eq, Ord, Show, Read)

instance Functor Block where
    fmap f x = case x of
        Block a stmts -> Block (f a) (map (fmap f) stmts)

data Stmt a
    = Empty a
    | BStmt a (Block a)
    | Init a (Type a) Ident (Expr a)
    | Ass a Ident (Expr a)
    | Ret a (Expr a)
    | Yield a (Expr a)
    | Break a
    | Continue a
    | Cond a (If a)
    | While a (Expr a) (Block a)
    | For a Ident (Expr a) (Block a)
    | SExp a (Expr a)
    | NestFn a (TopDef a)
  deriving (Eq, Ord, Show, Read)

instance Functor Stmt where
    fmap f x = case x of
        Empty a -> Empty (f a)
        BStmt a block -> BStmt (f a) (fmap f block)
        Init a type_ ident expr -> Init (f a) (fmap f type_) ident (fmap f expr)
        Ass a ident expr -> Ass (f a) ident (fmap f expr)
        Ret a expr -> Ret (f a) (fmap f expr)
        Yield a expr -> Yield (f a) (fmap f expr)
        Break a -> Break (f a)
        Continue a -> Continue (f a)
        Cond a if_ -> Cond (f a) (fmap f if_)
        While a expr block -> While (f a) (fmap f expr) (fmap f block)
        For a ident expr block -> For (f a) ident (fmap f expr) (fmap f block)
        SExp a expr -> SExp (f a) (fmap f expr)
        NestFn a topdef -> NestFn (f a) (fmap f topdef)

data If a
    = If a (Expr a) (Block a) | IfElse a (Expr a) (Block a) (Else a)
  deriving (Eq, Ord, Show, Read)

instance Functor If where
    fmap f x = case x of
        If a expr block -> If (f a) (fmap f expr) (fmap f block)
        IfElse a expr block else_ -> IfElse (f a) (fmap f expr) (fmap f block) (fmap f else_)

data Else a = ElseBlock a (Block a) | ElseIf a (If a)
  deriving (Eq, Ord, Show, Read)

instance Functor Else where
    fmap f x = case x of
        ElseBlock a block -> ElseBlock (f a) (fmap f block)
        ElseIf a if_ -> ElseIf (f a) (fmap f if_)

data Type a = Int a | Str a | Bool a | Generator a (Type a)
  deriving (Eq, Ord, Show, Read)

instance Functor Type where
    fmap f x = case x of
        Int a -> Int (f a)
        Str a -> Str (f a)
        Bool a -> Bool (f a)
        Generator a type_ -> Generator (f a) (fmap f type_)

data Expr a
    = EVar a Ident
    | ELitInt a Integer
    | ELitTrue a
    | ELitFalse a
    | EApp a Ident [Expr a]
    | EString a String
    | Neg a (Expr a)
    | Not a (Expr a)
    | EMul a (Expr a) (MulOp a) (Expr a)
    | EAdd a (Expr a) (AddOp a) (Expr a)
    | ERel a (Expr a) (RelOp a) (Expr a)
    | EAnd a (Expr a) (Expr a)
    | EOr a (Expr a) (Expr a)
  deriving (Eq, Ord, Show, Read)

instance Functor Expr where
    fmap f x = case x of
        EVar a ident -> EVar (f a) ident
        ELitInt a integer -> ELitInt (f a) integer
        ELitTrue a -> ELitTrue (f a)
        ELitFalse a -> ELitFalse (f a)
        EApp a ident exprs -> EApp (f a) ident (map (fmap f) exprs)
        EString a string -> EString (f a) string
        Neg a expr -> Neg (f a) (fmap f expr)
        Not a expr -> Not (f a) (fmap f expr)
        EMul a expr1 mulop expr2 -> EMul (f a) (fmap f expr1) (fmap f mulop) (fmap f expr2)
        EAdd a expr1 addop expr2 -> EAdd (f a) (fmap f expr1) (fmap f addop) (fmap f expr2)
        ERel a expr1 relop expr2 -> ERel (f a) (fmap f expr1) (fmap f relop) (fmap f expr2)
        EAnd a expr1 expr2 -> EAnd (f a) (fmap f expr1) (fmap f expr2)
        EOr a expr1 expr2 -> EOr (f a) (fmap f expr1) (fmap f expr2)

data AddOp a = Plus a | Minus a
  deriving (Eq, Ord, Show, Read)

instance Functor AddOp where
    fmap f x = case x of
        Plus a -> Plus (f a)
        Minus a -> Minus (f a)

data MulOp a = Times a | Div a | Mod a
  deriving (Eq, Ord, Show, Read)

instance Functor MulOp where
    fmap f x = case x of
        Times a -> Times (f a)
        Div a -> Div (f a)
        Mod a -> Mod (f a)

data RelOp a = LTH a | LE a | GTH a | GE a | EQU a | NE a
  deriving (Eq, Ord, Show, Read)

instance Functor RelOp where
    fmap f x = case x of
        LTH a -> LTH (f a)
        LE a -> LE (f a)
        GTH a -> GTH (f a)
        GE a -> GE (f a)
        EQU a -> EQU (f a)
        NE a -> NE (f a)

