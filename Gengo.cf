-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [TopDef] ;

FnDef.	   TopDef ::= "fn" Ident "(" [Arg] ")" "->" Type Block ;

separator nonempty TopDef "" ;

VArg.      ArgType ::= Type ;
RefArg.    ArgType ::= Type "&" ;
separator  ArgType "," ;

Arg.       Arg ::= ArgType Ident;
separator  Arg "," ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

Init.      Stmt ::= Type Ident "=" Expr ";" ;
Ass.       Stmt ::= Ident "=" Expr ";" ;

Ret.       Stmt ::= "return" Expr ";" ;
Break.     Stmt ::= "break" ";" ;
Continue.  Stmt ::= "continue" ";" ;

Cond.      Stmt ::= If ;

If.        If   ::= "if" "(" Expr ")" Block ;
IfElse.    If   ::= "if" "(" Expr ")" Block "else" Else ;
rules      Else ::= Block | If ;

While.     Stmt ::= "while" "(" Expr ")" Block ;

SExp.      Stmt ::= Expr ";" ;

NestFn.    Stmt ::= TopDef ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;
Str.       Type ::= "string" ;
Bool.      Type ::= "bool" ;
Fun.       Type ::= Type "(" [ArgType] ")" ;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= Ident ;
ELitInt.   Expr6 ::= Integer ;
ELitTrue.  Expr6 ::= "true" ;
ELitFalse. Expr6 ::= "false" ;
EApp.      Expr6 ::= Ident "(" [Expr] ")" ;
EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ;
Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

ELambda.   Expr  ::= "(" [Arg] ")" "=>" Type Block ;

coercions  Expr 6 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;
Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;
Div.       MulOp ::= "/" ;
Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;
LE.        RelOp ::= "<=" ;
GTH.       RelOp ::= ">" ;
GE.        RelOp ::= ">=" ;
EQU.       RelOp ::= "==" ;
NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "//" ;
comment    "/*" "*/" ;
