-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.3).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParGengo
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified AbsGengo
import LexGengo

}

%name pProgram_internal Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'        { PT _ (TS _ 1)  }
  '!='       { PT _ (TS _ 2)  }
  '%'        { PT _ (TS _ 3)  }
  '&'        { PT _ (TS _ 4)  }
  '&&'       { PT _ (TS _ 5)  }
  '('        { PT _ (TS _ 6)  }
  ')'        { PT _ (TS _ 7)  }
  '*'        { PT _ (TS _ 8)  }
  '+'        { PT _ (TS _ 9)  }
  ','        { PT _ (TS _ 10) }
  '-'        { PT _ (TS _ 11) }
  '->'       { PT _ (TS _ 12) }
  '/'        { PT _ (TS _ 13) }
  ';'        { PT _ (TS _ 14) }
  '<'        { PT _ (TS _ 15) }
  '<='       { PT _ (TS _ 16) }
  '='        { PT _ (TS _ 17) }
  '=='       { PT _ (TS _ 18) }
  '>'        { PT _ (TS _ 19) }
  '>='       { PT _ (TS _ 20) }
  'bool'     { PT _ (TS _ 21) }
  'break'    { PT _ (TS _ 22) }
  'continue' { PT _ (TS _ 23) }
  'else'     { PT _ (TS _ 24) }
  'false'    { PT _ (TS _ 25) }
  'fn'       { PT _ (TS _ 26) }
  'if'       { PT _ (TS _ 27) }
  'int'      { PT _ (TS _ 28) }
  'return'   { PT _ (TS _ 29) }
  'string'   { PT _ (TS _ 30) }
  'true'     { PT _ (TS _ 31) }
  'while'    { PT _ (TS _ 32) }
  '{'        { PT _ (TS _ 33) }
  '||'       { PT _ (TS _ 34) }
  '}'        { PT _ (TS _ 35) }
  L_Ident    { PT _ (TV _)    }
  L_integ    { PT _ (TI _)    }
  L_quoted   { PT _ (TL _)    }

%%

Ident :: { (AbsGengo.BNFC'Position, AbsGengo.Ident) }
Ident  : L_Ident { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.Ident (tokenText $1)) }

Integer :: { (AbsGengo.BNFC'Position, Integer) }
Integer  : L_integ  { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), (read (tokenText $1)) :: Integer) }

String  :: { (AbsGengo.BNFC'Position, String) }
String   : L_quoted { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), ((\(PT _ (TL s)) -> s) $1)) }

Program :: { (AbsGengo.BNFC'Position, AbsGengo.Program) }
Program
  : ListTopDef { (fst $1, AbsGengo.Program (fst $1) (snd $1)) }

TopDef :: { (AbsGengo.BNFC'Position, AbsGengo.TopDef) }
TopDef
  : 'fn' Ident '(' ListArg ')' '->' Type Block { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.FnDef (uncurry AbsGengo.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $7) (snd $8)) }

ListTopDef :: { (AbsGengo.BNFC'Position, [AbsGengo.TopDef]) }
ListTopDef
  : TopDef { (fst $1, (:[]) (snd $1)) }
  | TopDef ListTopDef { (fst $1, (:) (snd $1) (snd $2)) }

Arg :: { (AbsGengo.BNFC'Position, AbsGengo.Arg) }
Arg
  : Type Ident { (fst $1, AbsGengo.VArg (fst $1) (snd $1) (snd $2)) }
  | Type '&' Ident { (fst $1, AbsGengo.RefArg (fst $1) (snd $1) (snd $3)) }

ListArg :: { (AbsGengo.BNFC'Position, [AbsGengo.Arg]) }
ListArg
  : {- empty -} { (AbsGengo.BNFC'NoPosition, []) }
  | Arg { (fst $1, (:[]) (snd $1)) }
  | Arg ',' ListArg { (fst $1, (:) (snd $1) (snd $3)) }

Block :: { (AbsGengo.BNFC'Position, AbsGengo.Block) }
Block
  : '{' ListStmt '}' { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.Block (uncurry AbsGengo.BNFC'Position (tokenLineCol $1)) (snd $2)) }

ListStmt :: { (AbsGengo.BNFC'Position, [AbsGengo.Stmt]) }
ListStmt
  : {- empty -} { (AbsGengo.BNFC'NoPosition, []) }
  | Stmt ListStmt { (fst $1, (:) (snd $1) (snd $2)) }

Stmt :: { (AbsGengo.BNFC'Position, AbsGengo.Stmt) }
Stmt
  : ';' { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.Empty (uncurry AbsGengo.BNFC'Position (tokenLineCol $1))) }
  | Block { (fst $1, AbsGengo.BStmt (fst $1) (snd $1)) }
  | Type Ident '=' Expr ';' { (fst $1, AbsGengo.Init (fst $1) (snd $1) (snd $2) (snd $4)) }
  | Ident '=' Expr ';' { (fst $1, AbsGengo.Ass (fst $1) (snd $1) (snd $3)) }
  | 'return' Expr ';' { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.Ret (uncurry AbsGengo.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'break' ';' { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.Break (uncurry AbsGengo.BNFC'Position (tokenLineCol $1))) }
  | 'continue' ';' { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.Continue (uncurry AbsGengo.BNFC'Position (tokenLineCol $1))) }
  | If { (fst $1, AbsGengo.Cond (fst $1) (snd $1)) }
  | 'while' '(' Expr ')' Block { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.While (uncurry AbsGengo.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }
  | Expr ';' { (fst $1, AbsGengo.SExp (fst $1) (snd $1)) }
  | TopDef { (fst $1, AbsGengo.NestFn (fst $1) (snd $1)) }

If :: { (AbsGengo.BNFC'Position, AbsGengo.If) }
If
  : 'if' '(' Expr ')' Block { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.If (uncurry AbsGengo.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }
  | 'if' '(' Expr ')' Block 'else' Else { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.IfElse (uncurry AbsGengo.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5) (snd $7)) }

Else :: { (AbsGengo.BNFC'Position, AbsGengo.Else) }
Else
  : Block { (fst $1, AbsGengo.ElseBlock (fst $1) (snd $1)) }
  | If { (fst $1, AbsGengo.ElseIf (fst $1) (snd $1)) }

Type :: { (AbsGengo.BNFC'Position, AbsGengo.Type) }
Type
  : 'int' { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.Int (uncurry AbsGengo.BNFC'Position (tokenLineCol $1))) }
  | 'string' { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.Str (uncurry AbsGengo.BNFC'Position (tokenLineCol $1))) }
  | 'bool' { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.Bool (uncurry AbsGengo.BNFC'Position (tokenLineCol $1))) }

Expr6 :: { (AbsGengo.BNFC'Position, AbsGengo.Expr) }
Expr6
  : Ident { (fst $1, AbsGengo.EVar (fst $1) (snd $1)) }
  | Integer { (fst $1, AbsGengo.ELitInt (fst $1) (snd $1)) }
  | 'true' { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.ELitTrue (uncurry AbsGengo.BNFC'Position (tokenLineCol $1))) }
  | 'false' { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.ELitFalse (uncurry AbsGengo.BNFC'Position (tokenLineCol $1))) }
  | Ident '(' ListExpr ')' { (fst $1, AbsGengo.EApp (fst $1) (snd $1) (snd $3)) }
  | String { (fst $1, AbsGengo.EString (fst $1) (snd $1)) }
  | '(' Expr ')' { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), (snd $2)) }

Expr5 :: { (AbsGengo.BNFC'Position, AbsGengo.Expr) }
Expr5
  : '-' Expr6 { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.Neg (uncurry AbsGengo.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '!' Expr6 { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.Not (uncurry AbsGengo.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | Expr6 { (fst $1, (snd $1)) }

Expr4 :: { (AbsGengo.BNFC'Position, AbsGengo.Expr) }
Expr4
  : Expr4 MulOp Expr5 { (fst $1, AbsGengo.EMul (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr5 { (fst $1, (snd $1)) }

Expr3 :: { (AbsGengo.BNFC'Position, AbsGengo.Expr) }
Expr3
  : Expr3 AddOp Expr4 { (fst $1, AbsGengo.EAdd (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr4 { (fst $1, (snd $1)) }

Expr2 :: { (AbsGengo.BNFC'Position, AbsGengo.Expr) }
Expr2
  : Expr2 RelOp Expr3 { (fst $1, AbsGengo.ERel (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr3 { (fst $1, (snd $1)) }

Expr1 :: { (AbsGengo.BNFC'Position, AbsGengo.Expr) }
Expr1
  : Expr2 '&&' Expr1 { (fst $1, AbsGengo.EAnd (fst $1) (snd $1) (snd $3)) }
  | Expr2 { (fst $1, (snd $1)) }

Expr :: { (AbsGengo.BNFC'Position, AbsGengo.Expr) }
Expr
  : Expr1 '||' Expr { (fst $1, AbsGengo.EOr (fst $1) (snd $1) (snd $3)) }
  | Expr1 { (fst $1, (snd $1)) }

ListExpr :: { (AbsGengo.BNFC'Position, [AbsGengo.Expr]) }
ListExpr
  : {- empty -} { (AbsGengo.BNFC'NoPosition, []) }
  | Expr { (fst $1, (:[]) (snd $1)) }
  | Expr ',' ListExpr { (fst $1, (:) (snd $1) (snd $3)) }

AddOp :: { (AbsGengo.BNFC'Position, AbsGengo.AddOp) }
AddOp
  : '+' { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.Plus (uncurry AbsGengo.BNFC'Position (tokenLineCol $1))) }
  | '-' { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.Minus (uncurry AbsGengo.BNFC'Position (tokenLineCol $1))) }

MulOp :: { (AbsGengo.BNFC'Position, AbsGengo.MulOp) }
MulOp
  : '*' { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.Times (uncurry AbsGengo.BNFC'Position (tokenLineCol $1))) }
  | '/' { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.Div (uncurry AbsGengo.BNFC'Position (tokenLineCol $1))) }
  | '%' { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.Mod (uncurry AbsGengo.BNFC'Position (tokenLineCol $1))) }

RelOp :: { (AbsGengo.BNFC'Position, AbsGengo.RelOp) }
RelOp
  : '<' { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.LTH (uncurry AbsGengo.BNFC'Position (tokenLineCol $1))) }
  | '<=' { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.LE (uncurry AbsGengo.BNFC'Position (tokenLineCol $1))) }
  | '>' { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.GTH (uncurry AbsGengo.BNFC'Position (tokenLineCol $1))) }
  | '>=' { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.GE (uncurry AbsGengo.BNFC'Position (tokenLineCol $1))) }
  | '==' { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.EQU (uncurry AbsGengo.BNFC'Position (tokenLineCol $1))) }
  | '!=' { (uncurry AbsGengo.BNFC'Position (tokenLineCol $1), AbsGengo.NE (uncurry AbsGengo.BNFC'Position (tokenLineCol $1))) }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

-- Entrypoints

pProgram :: [Token] -> Err AbsGengo.Program
pProgram = fmap snd . pProgram_internal
}

