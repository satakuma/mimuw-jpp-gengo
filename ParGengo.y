-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParGengo where
import AbsGengo
import LexGengo
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '(' { PT _ (TS _ 6) }
  ')' { PT _ (TS _ 7) }
  '*' { PT _ (TS _ 8) }
  '+' { PT _ (TS _ 9) }
  ',' { PT _ (TS _ 10) }
  '-' { PT _ (TS _ 11) }
  '->' { PT _ (TS _ 12) }
  '/' { PT _ (TS _ 13) }
  ';' { PT _ (TS _ 14) }
  '<' { PT _ (TS _ 15) }
  '<=' { PT _ (TS _ 16) }
  '=' { PT _ (TS _ 17) }
  '==' { PT _ (TS _ 18) }
  '>' { PT _ (TS _ 19) }
  '>=' { PT _ (TS _ 20) }
  '@' { PT _ (TS _ 21) }
  'bool' { PT _ (TS _ 22) }
  'break' { PT _ (TS _ 23) }
  'continue' { PT _ (TS _ 24) }
  'else' { PT _ (TS _ 25) }
  'false' { PT _ (TS _ 26) }
  'fn' { PT _ (TS _ 27) }
  'for' { PT _ (TS _ 28) }
  'gn' { PT _ (TS _ 29) }
  'if' { PT _ (TS _ 30) }
  'in' { PT _ (TS _ 31) }
  'int' { PT _ (TS _ 32) }
  'return' { PT _ (TS _ 33) }
  'string' { PT _ (TS _ 34) }
  'true' { PT _ (TS _ 35) }
  'while' { PT _ (TS _ 36) }
  'yield' { PT _ (TS _ 37) }
  '{' { PT _ (TS _ 38) }
  '||' { PT _ (TS _ 39) }
  '}' { PT _ (TS _ 40) }
  L_ident  { PT _ (TV $$) }
  L_integ  { PT _ (TI $$) }
  L_quoted { PT _ (TL $$) }

%%

Ident   :: { Ident }
Ident    : L_ident  { Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read ( $1)) :: Integer }

String  :: { String }
String   : L_quoted {  $1 }

Program :: { (Program ()) }
Program : ListTopDef { AbsGengo.Program () $1 }
TopDef :: { (TopDef ()) }
TopDef : 'fn' Ident '(' ListArg ')' '->' Type Block { AbsGengo.FnDef () $2 $4 $7 $8 }
       | 'gn' Ident '(' ListArg ')' '->' Type Block { AbsGengo.GnDef () $2 $4 $7 $8 }
ListTopDef :: { [TopDef ()] }
ListTopDef : TopDef { (:[]) $1 } | TopDef ListTopDef { (:) $1 $2 }
Arg :: { (Arg ()) }
Arg : Type Ident { AbsGengo.VArg () $1 $2 }
    | Type '&' Ident { AbsGengo.RefArg () $1 $3 }
ListArg :: { [Arg ()] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
Block :: { (Block ()) }
Block : '{' ListStmt '}' { AbsGengo.Block () (reverse $2) }
ListStmt :: { [Stmt ()] }
ListStmt : {- empty -} { [] } | ListStmt Stmt { flip (:) $1 $2 }
Stmt :: { (Stmt ()) }
Stmt : ';' { AbsGengo.Empty () }
     | Block { AbsGengo.BStmt () $1 }
     | Type Ident '=' Expr ';' { AbsGengo.Init () $1 $2 $4 }
     | Ident '=' Expr ';' { AbsGengo.Ass () $1 $3 }
     | 'return' Expr ';' { AbsGengo.Ret () $2 }
     | 'yield' Expr ';' { AbsGengo.Yield () $2 }
     | 'break' ';' { AbsGengo.Break () }
     | 'continue' ';' { AbsGengo.Continue () }
     | If { AbsGengo.Cond () $1 }
     | 'while' '(' Expr ')' Block { AbsGengo.While () $3 $5 }
     | 'for' Ident 'in' '(' Expr ')' Block { AbsGengo.For () $2 $5 $7 }
     | Expr ';' { AbsGengo.SExp () $1 }
     | TopDef { AbsGengo.NestFn () $1 }
If :: { (If ()) }
If : 'if' '(' Expr ')' Block { AbsGengo.If () $3 $5 }
   | 'if' '(' Expr ')' Block 'else' Else { AbsGengo.IfElse () $3 $5 $7 }
Else :: { (Else ()) }
Else : Block { AbsGengo.ElseBlock () $1 }
     | If { AbsGengo.ElseIf () $1 }
Type :: { (Type ()) }
Type : 'int' { AbsGengo.Int () }
     | 'string' { AbsGengo.Str () }
     | 'bool' { AbsGengo.Bool () }
     | '@' '(' Type ')' { AbsGengo.Generator () $3 }
Expr6 :: { Expr () }
Expr6 : Ident { AbsGengo.EVar () $1 }
      | Integer { AbsGengo.ELitInt () $1 }
      | 'true' { AbsGengo.ELitTrue () }
      | 'false' { AbsGengo.ELitFalse () }
      | Ident '(' ListExpr ')' { AbsGengo.EApp () $1 $3 }
      | String { AbsGengo.EString () $1 }
      | '(' Expr ')' { $2 }
Expr5 :: { Expr () }
Expr5 : '-' Expr6 { AbsGengo.Neg () $2 }
      | '!' Expr6 { AbsGengo.Not () $2 }
      | Expr6 { $1 }
Expr4 :: { Expr () }
Expr4 : Expr4 MulOp Expr5 { AbsGengo.EMul () $1 $2 $3 }
      | Expr5 { $1 }
Expr3 :: { Expr () }
Expr3 : Expr3 AddOp Expr4 { AbsGengo.EAdd () $1 $2 $3 }
      | Expr4 { $1 }
Expr2 :: { Expr () }
Expr2 : Expr2 RelOp Expr3 { AbsGengo.ERel () $1 $2 $3 }
      | Expr3 { $1 }
Expr1 :: { Expr () }
Expr1 : Expr2 '&&' Expr1 { AbsGengo.EAnd () $1 $3 } | Expr2 { $1 }
Expr :: { (Expr ()) }
Expr : Expr1 '||' Expr { AbsGengo.EOr () $1 $3 } | Expr1 { $1 }
ListExpr :: { [Expr ()] }
ListExpr : {- empty -} { [] }
         | Expr { (:[]) $1 }
         | Expr ',' ListExpr { (:) $1 $3 }
AddOp :: { (AddOp ()) }
AddOp : '+' { AbsGengo.Plus () } | '-' { AbsGengo.Minus () }
MulOp :: { (MulOp ()) }
MulOp : '*' { AbsGengo.Times () }
      | '/' { AbsGengo.Div () }
      | '%' { AbsGengo.Mod () }
RelOp :: { (RelOp ()) }
RelOp : '<' { AbsGengo.LTH () }
      | '<=' { AbsGengo.LE () }
      | '>' { AbsGengo.GTH () }
      | '>=' { AbsGengo.GE () }
      | '==' { AbsGengo.EQU () }
      | '!=' { AbsGengo.NE () }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

